import { Component, OnInit } from '@angular/core';
import { FormControl, FormGroup } from '@angular/forms';
import { Router } from '@angular/router';

import { CirclService } from '../circl.service';
import { Observable, of, interval } from 'rxjs';
import { startWith, map, take, debounce, tap } from 'rxjs/operators';

@Component({
  selector: 'app-cve-search',
  templateUrl: './cve-search.component.html',
  styleUrls: ['./cve-search.component.css']
})
export class CveSearchComponent implements OnInit {
  types = [
    {name:"Name", value: "id"}, 
    {name:"Vendor/Product", value:"product"}
  ];
  vendors:string[] = [];
  products:string[] = [];
  cveList:string[] = [];
  loadingCVEList:Boolean = false;
  filterdVendors: Observable<string[]>;
  filterdProducts: Observable<string[]>;
  searchForm = new FormGroup({
    type: new FormControl(this.types),
    cveId: new FormControl('CVE-'),
    vendor: new FormControl(),
    product: new FormControl({value: '', disabled: true})
  });

  constructor(
    private router:Router,
    private circl:CirclService
  ) { }

  ngOnInit() {
    this.getVendors();
    this.subscribeFilterVendors();
    this.subscribeFilterProducts();
  }

  private getVendors() {
    this.circl.getVendors().subscribe(vendors => {
      this.vendors = vendors;
    });    
  }

  private subscribeFilterVendors() {
    this.filterdVendors = this.searchForm.controls.vendor.valueChanges.pipe(
      startWith(''),
      // debounce(() => interval(1000)), // would be better with, but filterVendors must be last
      tap(value => this.getProducts(value)),
      map(value => this.filterList(this.vendors, value)),
    );
  }

  private subscribeFilterProducts() {
    this.filterdProducts = this.searchForm.controls.product.valueChanges.pipe(
      startWith(''),
      tap(value => this.getCVEList(value)),
      map(value => this.filterList(this.products, value))
    )
  }

  private filterList(list:string[], value:string) :string[] {
    const filterValue = value.toLowerCase();
    return list.filter(vendor => vendor.toLowerCase().includes(filterValue))
        .slice(0,50); 
  }

  private getProducts(vendor:string) {
    if (this.vendors.includes(vendor)) {
      this.circl.getProducts(vendor).subscribe(products => {
        this.products = products;
        this.searchForm.controls.product.enable();
      });
    } else {
      // clean up
      this.products = [];
      this.searchForm.controls.product.setValue('');
      this.cveList = [];
      this.searchForm.controls.product.disable();
    }
  }

  private getCVEList(product:string) {
    if (this.products.includes(product)) {
      const vendor = this.searchForm.value.vendor;
      this.loadingCVEList = true;
      this.circl.getCVEIds(vendor, product).subscribe(cves => {
        this.cveList = cves;
        this.loadingCVEList = false;
      })
    } else {
      this.cveList = [];
    }
  }

  fetchCVE() {
    if (this.searchForm.status === "VALID") {
      this.router.navigate(['/cve', this.searchForm.value.cveId]);
    }
  }

}
