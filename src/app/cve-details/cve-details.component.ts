import { Component, OnInit } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CirclService, CVE } from '../circl.service';

type CVETable = CVERow[];
type CVERow = {
  title:string, 
  value:string|string[]|Date, 
  keys?:string[], 
  type?:"list"|"date"|"dictionary"|"complex"
};

@Component({
  selector: 'app-cve-details',
  templateUrl: './cve-details.component.html',
  styleUrls: ['./cve-details.component.css']
})
export class CveDetailsComponent implements OnInit {
  cve:CVE;
  dataSource:CVETable;
  displayColumns:string[] = ['title', 'value'];
  isInvalid = false;

  // Reference: https://github.com/adulau/cve-search/blob/master/web/templates/cve.html
  private readonly baseRows:string[] = ['vulnerable_configuration_cpe_2_2','impactCVSS','exploitCVSS' ,'cvss', 'capec', 'access', 'impact', 'cvss-time', 'Modified', 'Published', 'summary', 'vulnerable_configuration', 'references', '_id', 'id', 'last-modified', 'ranking', 'cwe'];

  constructor(
    private circle:CirclService,
    private route:ActivatedRoute
  ) { }

  ngOnInit() {
    const id = this.route.snapshot.paramMap.get('id');

    try {
      this.isInvalid = false;
      this.circle.getCVE(id).subscribe((data:CVE) => {
        this.cve = data;
        this.dataSource = this.CVEToArray(this.cve)
          .filter(row => row.value !== undefined);
      });
    } catch (e) {
      // DO something to show CVE could not be loaded
      this.isInvalid = true;
      console.log(e.message);
    }
  }

  CVEToArray(cve:CVE):CVETable {
    let base:CVETable = [
      {title: "ID", value: cve.id},
      {title: "Summary", value: cve.summary},
      {title: "references", value: cve.references, type:"complex"},
      {title: "CVSS", value: cve.cvss},
      {title: "Last Major Update", value: cve.Modified, type:"date"},
      {title: "Published", value: cve.Published, type:"date"},
      {title: "Last modified", value: cve["last-modified"], type:"date"}
    ];

    return base.concat(...Object.keys(cve)
      .filter(k => !this.baseRows.includes(k))
      .map(key => this.complex(cve[key], key))
    );
  }

  complex(data:any, key:string):CVERow {
    return {title: key, value:data, type:"complex"};
  }

}
